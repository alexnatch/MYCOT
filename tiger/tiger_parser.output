Terminals unused in grammar

   KW_NIL
   tLOWEST
   '!'


State 15 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 primaryExp: IDENTIFIER
    2           | tNUMBER
    3           | tSTRING
    4           | '(' exp ')'

    5 postfixExp: primaryExp
    6           | postfixExp '[' exp ']'
    7           | postfixExp '(' ')'
    8           | postfixExp '(' argExpList ')'

    9 argExpList: assignExp
   10           | argExpList ',' assignExp

   11 unaryExp: postfixExp

   12 arithExp: unaryExp
   13         | arithExp '+' unaryExp
   14         | arithExp '-' unaryExp
   15         | arithExp '*' unaryExp
   16         | arithExp '/' unaryExp
   17         | '-' unaryExp

   18 relationExp: arithExp
   19            | relationExp tLEQ arithExp
   20            | relationExp tGEQ arithExp
   21            | relationExp '<' arithExp
   22            | relationExp '>' arithExp

   23 equalExp: relationExp
   24         | equalExp tEQ relationExp
   25         | equalExp tNEQ relationExp

   26 andExp: equalExp
   27       | andExp '&' equalExp

   28 orExp: andExp
   29      | orExp '|' andExp

   30 conditionalExp: orExp

   31 assignExp: conditionalExp
   32          | unaryExp assignOp unaryExp

   33 exp: assignExp
   34    | exp ',' assignExp

   35 assignOp: tASSIGN

   36 decs: dec
   37     | decs terms dec

   38 dec: typeDec
   39    | varDec
   40    | funcDef

   41 typeDec: KW_TYPE IDENTIFIER '=' typeDef

   42 typeDef: type
   43        | KW_TYPE_INT
   44        | KW_TYPE_STR

   45 type: IDENTIFIER
   46     | '{' typeFields '}'
   47     | KW_ARRAY_OF typeDef

   48 typeFields: typeField
   49           | typeFields ',' typeField

   50 typeField: none
   51          | IDENTIFIER ':' typeDef

   52 varDec: KW_VAR IDENTIFIER ':' typeDef
   53       | KW_VAR IDENTIFIER ':' typeDef assignOp unaryExp

   54 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' '=' compoundStmt
   55        | KW_FUNC IDENTIFIER '(' typeFields ')' ':' typeDef '=' compoundStmt

   56 compoundStmt: '(' ')'
   57             | '(' decs ')'
   58             | '(' stmts ')'
   59             | '(' decs stmts ')'

   60 stmts: stmt
   61      | stmts stmt

   62 stmt: expStmt
   63     | compoundStmt
   64     | selectionStmt
   65     | iterationStmt
   66     | jumpStmt
   67     | letStmt

   68 expStmt: exp ';'

   69 selectionStmt: KW_IF exp KW_THEN stmt
   70              | KW_IF exp KW_THEN stmt KW_ELSE stmt

   71 iterationStmt: KW_WHILE exp KW_DO stmt
   72              | KW_FOR IDENTIFIER tASSIGN tNUMBER KW_TO tNUMBER KW_DO stmt

   73 jumpStmt: KW_BREAK

   74 letStmt: KW_LET decs KW_IN stmt KW_END

   75 terms: term
   76      | terms ';'

   77 term: ';'

   78 none: /* empty */

   79 extDec: dec
   80       | stmt

   81 prog: extDec
   82     | prog extDec


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'&' (38) 27
'(' (40) 4 7 8 54 55 56 57 58 59
')' (41) 4 7 8 54 55 56 57 58 59
'*' (42) 15
'+' (43) 13
',' (44) 10 34 49
'-' (45) 14 17
'/' (47) 16
':' (58) 51 52 53 55
';' (59) 68 76 77
'<' (60) 21
'=' (61) 41 54 55
'>' (62) 22
'[' (91) 6
']' (93) 6
'{' (123) 46
'|' (124) 29
'}' (125) 46
error (256)
KW_IF (258) 69 70
KW_THEN (259) 69 70
KW_ELSE (260) 70
KW_END (261) 74
KW_WHILE (262) 71
KW_DO (263) 71 72
KW_FOR (264) 72
KW_BREAK (265) 73
KW_TO (266) 72
KW_IN (267) 74
KW_LET (268) 74
KW_VAR (269) 52 53
KW_NIL (270)
KW_TYPE (271) 41
KW_TYPE_INT (272) 43
KW_TYPE_STR (273) 44
KW_FUNC (274) 54 55
KW_ARRAY_OF (275) 47
tLOWEST (276)
tEQ (277) 24
tLEQ (278) 19
tNEQ (279) 25
tGEQ (280) 20
tUMINUS (281)
tASSIGN (282) 35 72
tNUMBER (283) 2 72
tSTRING (284) 3
IDENTIFIER (285) 1 41 45 51 52 53 54 55 72


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
primaryExp (51)
    on left: 1 2 3 4, on right: 5
postfixExp (52)
    on left: 5 6 7 8, on right: 6 7 8 11
argExpList (53)
    on left: 9 10, on right: 8 10
unaryExp (54)
    on left: 11, on right: 12 13 14 15 16 17 32 53
arithExp (55)
    on left: 12 13 14 15 16 17, on right: 13 14 15 16 18 19 20 21 22
relationExp (56)
    on left: 18 19 20 21 22, on right: 19 20 21 22 23 24 25
equalExp (57)
    on left: 23 24 25, on right: 24 25 26 27
andExp (58)
    on left: 26 27, on right: 27 28 29
orExp (59)
    on left: 28 29, on right: 29 30
conditionalExp (60)
    on left: 30, on right: 31
assignExp (61)
    on left: 31 32, on right: 9 10 33 34
exp (62)
    on left: 33 34, on right: 4 6 34 68 69 70 71
assignOp (63)
    on left: 35, on right: 32 53
decs (64)
    on left: 36 37, on right: 37 57 59 74
dec (65)
    on left: 38 39 40, on right: 36 37 79
typeDec (66)
    on left: 41, on right: 38
typeDef (67)
    on left: 42 43 44, on right: 41 47 51 52 53 55
type (68)
    on left: 45 46 47, on right: 42
typeFields (69)
    on left: 48 49, on right: 46 49 54 55
typeField (70)
    on left: 50 51, on right: 48 49
varDec (71)
    on left: 52 53, on right: 39
funcDef (72)
    on left: 54 55, on right: 40
compoundStmt (73)
    on left: 56 57 58 59, on right: 54 55 63
stmts (74)
    on left: 60 61, on right: 58 59 61
stmt (75)
    on left: 62 63 64 65 66 67, on right: 60 61 69 70 71 72 74 80
expStmt (76)
    on left: 68, on right: 62
selectionStmt (77)
    on left: 69 70, on right: 64
iterationStmt (78)
    on left: 71 72, on right: 65
jumpStmt (79)
    on left: 73, on right: 66
letStmt (80)
    on left: 74, on right: 67
terms (81)
    on left: 75 76, on right: 37 76
term (82)
    on left: 77, on right: 75
none (83)
    on left: 78, on right: 50
extDec (84)
    on left: 79 80, on right: 81 82
prog (85)
    on left: 81 82, on right: 0 82


state 0

    0 $accept: . prog $end

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    KW_VAR      shift, and go to state 6
    KW_TYPE     shift, and go to state 7
    KW_FUNC     shift, and go to state 8
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    dec             go to state 25
    typeDec         go to state 26
    varDec          go to state 27
    funcDef         go to state 28
    compoundStmt    go to state 29
    stmt            go to state 30
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35
    extDec          go to state 36
    prog            go to state 37


state 1

   69 selectionStmt: KW_IF . exp KW_THEN stmt
   70              | KW_IF . exp KW_THEN stmt KW_ELSE stmt

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 39


state 2

   71 iterationStmt: KW_WHILE . exp KW_DO stmt

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 40


state 3

   72 iterationStmt: KW_FOR . IDENTIFIER tASSIGN tNUMBER KW_TO tNUMBER KW_DO stmt

    IDENTIFIER  shift, and go to state 41


state 4

   73 jumpStmt: KW_BREAK .

    $default  reduce using rule 73 (jumpStmt)


state 5

   74 letStmt: KW_LET . decs KW_IN stmt KW_END

    KW_VAR   shift, and go to state 6
    KW_TYPE  shift, and go to state 7
    KW_FUNC  shift, and go to state 8

    decs     go to state 42
    dec      go to state 43
    typeDec  go to state 26
    varDec   go to state 27
    funcDef  go to state 28


state 6

   52 varDec: KW_VAR . IDENTIFIER ':' typeDef
   53       | KW_VAR . IDENTIFIER ':' typeDef assignOp unaryExp

    IDENTIFIER  shift, and go to state 44


state 7

   41 typeDec: KW_TYPE . IDENTIFIER '=' typeDef

    IDENTIFIER  shift, and go to state 45


state 8

   54 funcDef: KW_FUNC . IDENTIFIER '(' typeFields ')' '=' compoundStmt
   55        | KW_FUNC . IDENTIFIER '(' typeFields ')' ':' typeDef '=' compoundStmt

    IDENTIFIER  shift, and go to state 46


state 9

    2 primaryExp: tNUMBER .

    $default  reduce using rule 2 (primaryExp)


state 10

    3 primaryExp: tSTRING .

    $default  reduce using rule 3 (primaryExp)


state 11

    1 primaryExp: IDENTIFIER .

    $default  reduce using rule 1 (primaryExp)


state 12

   17 arithExp: '-' . unaryExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 47


state 13

    4 primaryExp: '(' . exp ')'
   56 compoundStmt: '(' . ')'
   57             | '(' . decs ')'
   58             | '(' . stmts ')'
   59             | '(' . decs stmts ')'

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    KW_VAR      shift, and go to state 6
    KW_TYPE     shift, and go to state 7
    KW_FUNC     shift, and go to state 8
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13
    ')'         shift, and go to state 48

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 49
    decs            go to state 50
    dec             go to state 43
    typeDec         go to state 26
    varDec          go to state 27
    funcDef         go to state 28
    compoundStmt    go to state 29
    stmts           go to state 51
    stmt            go to state 52
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 14

    5 postfixExp: primaryExp .

    $default  reduce using rule 5 (postfixExp)


state 15

    6 postfixExp: postfixExp . '[' exp ']'
    7           | postfixExp . '(' ')'
    8           | postfixExp . '(' argExpList ')'
   11 unaryExp: postfixExp .

    '('  shift, and go to state 53
    '['  shift, and go to state 54

    '('       [reduce using rule 11 (unaryExp)]
    $default  reduce using rule 11 (unaryExp)


state 16

   12 arithExp: unaryExp .
   32 assignExp: unaryExp . assignOp unaryExp

    tASSIGN  shift, and go to state 55

    $default  reduce using rule 12 (arithExp)

    assignOp  go to state 56


state 17

   13 arithExp: arithExp . '+' unaryExp
   14         | arithExp . '-' unaryExp
   15         | arithExp . '*' unaryExp
   16         | arithExp . '/' unaryExp
   18 relationExp: arithExp .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 18 (relationExp)


state 18

   19 relationExp: relationExp . tLEQ arithExp
   20            | relationExp . tGEQ arithExp
   21            | relationExp . '<' arithExp
   22            | relationExp . '>' arithExp
   23 equalExp: relationExp .

    tLEQ  shift, and go to state 61
    tGEQ  shift, and go to state 62
    '>'   shift, and go to state 63
    '<'   shift, and go to state 64

    $default  reduce using rule 23 (equalExp)


state 19

   24 equalExp: equalExp . tEQ relationExp
   25         | equalExp . tNEQ relationExp
   26 andExp: equalExp .

    tEQ   shift, and go to state 65
    tNEQ  shift, and go to state 66

    $default  reduce using rule 26 (andExp)


state 20

   27 andExp: andExp . '&' equalExp
   28 orExp: andExp .

    '&'  shift, and go to state 67

    $default  reduce using rule 28 (orExp)


state 21

   29 orExp: orExp . '|' andExp
   30 conditionalExp: orExp .

    '|'  shift, and go to state 68

    $default  reduce using rule 30 (conditionalExp)


state 22

   31 assignExp: conditionalExp .

    $default  reduce using rule 31 (assignExp)


state 23

   33 exp: assignExp .

    $default  reduce using rule 33 (exp)


state 24

   34 exp: exp . ',' assignExp
   68 expStmt: exp . ';'

    ','  shift, and go to state 69
    ';'  shift, and go to state 70


state 25

   79 extDec: dec .

    $default  reduce using rule 79 (extDec)


state 26

   38 dec: typeDec .

    $default  reduce using rule 38 (dec)


state 27

   39 dec: varDec .

    $default  reduce using rule 39 (dec)


state 28

   40 dec: funcDef .

    $default  reduce using rule 40 (dec)


state 29

   63 stmt: compoundStmt .

    $default  reduce using rule 63 (stmt)


state 30

   80 extDec: stmt .

    $default  reduce using rule 80 (extDec)


state 31

   62 stmt: expStmt .

    $default  reduce using rule 62 (stmt)


state 32

   64 stmt: selectionStmt .

    $default  reduce using rule 64 (stmt)


state 33

   65 stmt: iterationStmt .

    $default  reduce using rule 65 (stmt)


state 34

   66 stmt: jumpStmt .

    $default  reduce using rule 66 (stmt)


state 35

   67 stmt: letStmt .

    $default  reduce using rule 67 (stmt)


state 36

   81 prog: extDec .

    $default  reduce using rule 81 (prog)


state 37

    0 $accept: prog . $end
   82 prog: prog . extDec

    $end        shift, and go to state 71
    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    KW_VAR      shift, and go to state 6
    KW_TYPE     shift, and go to state 7
    KW_FUNC     shift, and go to state 8
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    dec             go to state 25
    typeDec         go to state 26
    varDec          go to state 27
    funcDef         go to state 28
    compoundStmt    go to state 29
    stmt            go to state 30
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35
    extDec          go to state 72


state 38

    4 primaryExp: '(' . exp ')'

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 73


state 39

   34 exp: exp . ',' assignExp
   69 selectionStmt: KW_IF exp . KW_THEN stmt
   70              | KW_IF exp . KW_THEN stmt KW_ELSE stmt

    KW_THEN  shift, and go to state 74
    ','      shift, and go to state 69


state 40

   34 exp: exp . ',' assignExp
   71 iterationStmt: KW_WHILE exp . KW_DO stmt

    KW_DO  shift, and go to state 75
    ','    shift, and go to state 69


state 41

   72 iterationStmt: KW_FOR IDENTIFIER . tASSIGN tNUMBER KW_TO tNUMBER KW_DO stmt

    tASSIGN  shift, and go to state 76


state 42

   37 decs: decs . terms dec
   74 letStmt: KW_LET decs . KW_IN stmt KW_END

    KW_IN  shift, and go to state 77
    ';'    shift, and go to state 78

    terms  go to state 79
    term   go to state 80


state 43

   36 decs: dec .

    $default  reduce using rule 36 (decs)


state 44

   52 varDec: KW_VAR IDENTIFIER . ':' typeDef
   53       | KW_VAR IDENTIFIER . ':' typeDef assignOp unaryExp

    ':'  shift, and go to state 81


state 45

   41 typeDec: KW_TYPE IDENTIFIER . '=' typeDef

    '='  shift, and go to state 82


state 46

   54 funcDef: KW_FUNC IDENTIFIER . '(' typeFields ')' '=' compoundStmt
   55        | KW_FUNC IDENTIFIER . '(' typeFields ')' ':' typeDef '=' compoundStmt

    '('  shift, and go to state 83


state 47

   17 arithExp: '-' unaryExp .

    $default  reduce using rule 17 (arithExp)


state 48

   56 compoundStmt: '(' ')' .

    $default  reduce using rule 56 (compoundStmt)


state 49

    4 primaryExp: '(' exp . ')'
   34 exp: exp . ',' assignExp
   68 expStmt: exp . ';'

    ')'  shift, and go to state 84
    ','  shift, and go to state 69
    ';'  shift, and go to state 70


state 50

   37 decs: decs . terms dec
   57 compoundStmt: '(' decs . ')'
   59             | '(' decs . stmts ')'

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13
    ')'         shift, and go to state 85
    ';'         shift, and go to state 78

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmts           go to state 86
    stmt            go to state 52
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35
    terms           go to state 79
    term            go to state 80


state 51

   58 compoundStmt: '(' stmts . ')'
   61 stmts: stmts . stmt

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13
    ')'         shift, and go to state 87

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmt            go to state 88
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 52

   60 stmts: stmt .

    $default  reduce using rule 60 (stmts)


state 53

    7 postfixExp: postfixExp '(' . ')'
    8           | postfixExp '(' . argExpList ')'

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38
    ')'         shift, and go to state 89

    primaryExp      go to state 14
    postfixExp      go to state 15
    argExpList      go to state 90
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 91


state 54

    6 postfixExp: postfixExp '[' . exp ']'

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 92


state 55

   35 assignOp: tASSIGN .

    $default  reduce using rule 35 (assignOp)


state 56

   32 assignExp: unaryExp assignOp . unaryExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 93


state 57

   14 arithExp: arithExp '-' . unaryExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 94


state 58

   13 arithExp: arithExp '+' . unaryExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 95


state 59

   15 arithExp: arithExp '*' . unaryExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 96


state 60

   16 arithExp: arithExp '/' . unaryExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 97


state 61

   19 relationExp: relationExp tLEQ . arithExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 98
    arithExp    go to state 99


state 62

   20 relationExp: relationExp tGEQ . arithExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 98
    arithExp    go to state 100


state 63

   22 relationExp: relationExp '>' . arithExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 98
    arithExp    go to state 101


state 64

   21 relationExp: relationExp '<' . arithExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 98
    arithExp    go to state 102


state 65

   24 equalExp: equalExp tEQ . relationExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp   go to state 14
    postfixExp   go to state 15
    unaryExp     go to state 98
    arithExp     go to state 17
    relationExp  go to state 103


state 66

   25 equalExp: equalExp tNEQ . relationExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp   go to state 14
    postfixExp   go to state 15
    unaryExp     go to state 98
    arithExp     go to state 17
    relationExp  go to state 104


state 67

   27 andExp: andExp '&' . equalExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp   go to state 14
    postfixExp   go to state 15
    unaryExp     go to state 98
    arithExp     go to state 17
    relationExp  go to state 18
    equalExp     go to state 105


state 68

   29 orExp: orExp '|' . andExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp   go to state 14
    postfixExp   go to state 15
    unaryExp     go to state 98
    arithExp     go to state 17
    relationExp  go to state 18
    equalExp     go to state 19
    andExp       go to state 106


state 69

   34 exp: exp ',' . assignExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 107


state 70

   68 expStmt: exp ';' .

    $default  reduce using rule 68 (expStmt)


state 71

    0 $accept: prog $end .

    $default  accept


state 72

   82 prog: prog extDec .

    $default  reduce using rule 82 (prog)


state 73

    4 primaryExp: '(' exp . ')'
   34 exp: exp . ',' assignExp

    ')'  shift, and go to state 84
    ','  shift, and go to state 69


state 74

   69 selectionStmt: KW_IF exp KW_THEN . stmt
   70              | KW_IF exp KW_THEN . stmt KW_ELSE stmt

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmt            go to state 108
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 75

   71 iterationStmt: KW_WHILE exp KW_DO . stmt

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmt            go to state 109
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 76

   72 iterationStmt: KW_FOR IDENTIFIER tASSIGN . tNUMBER KW_TO tNUMBER KW_DO stmt

    tNUMBER  shift, and go to state 110


state 77

   74 letStmt: KW_LET decs KW_IN . stmt KW_END

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmt            go to state 111
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 78

   77 term: ';' .

    $default  reduce using rule 77 (term)


state 79

   37 decs: decs terms . dec
   76 terms: terms . ';'

    KW_VAR   shift, and go to state 6
    KW_TYPE  shift, and go to state 7
    KW_FUNC  shift, and go to state 8
    ';'      shift, and go to state 112

    dec      go to state 113
    typeDec  go to state 26
    varDec   go to state 27
    funcDef  go to state 28


state 80

   75 terms: term .

    $default  reduce using rule 75 (terms)


state 81

   52 varDec: KW_VAR IDENTIFIER ':' . typeDef
   53       | KW_VAR IDENTIFIER ':' . typeDef assignOp unaryExp

    KW_TYPE_INT  shift, and go to state 114
    KW_TYPE_STR  shift, and go to state 115
    KW_ARRAY_OF  shift, and go to state 116
    IDENTIFIER   shift, and go to state 117
    '{'          shift, and go to state 118

    typeDef  go to state 119
    type     go to state 120


state 82

   41 typeDec: KW_TYPE IDENTIFIER '=' . typeDef

    KW_TYPE_INT  shift, and go to state 114
    KW_TYPE_STR  shift, and go to state 115
    KW_ARRAY_OF  shift, and go to state 116
    IDENTIFIER   shift, and go to state 117
    '{'          shift, and go to state 118

    typeDef  go to state 121
    type     go to state 120


state 83

   54 funcDef: KW_FUNC IDENTIFIER '(' . typeFields ')' '=' compoundStmt
   55        | KW_FUNC IDENTIFIER '(' . typeFields ')' ':' typeDef '=' compoundStmt

    IDENTIFIER  shift, and go to state 122

    $default  reduce using rule 78 (none)

    typeFields  go to state 123
    typeField   go to state 124
    none        go to state 125


state 84

    4 primaryExp: '(' exp ')' .

    $default  reduce using rule 4 (primaryExp)


state 85

   57 compoundStmt: '(' decs ')' .

    $default  reduce using rule 57 (compoundStmt)


state 86

   59 compoundStmt: '(' decs stmts . ')'
   61 stmts: stmts . stmt

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13
    ')'         shift, and go to state 126

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmt            go to state 88
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 87

   58 compoundStmt: '(' stmts ')' .

    $default  reduce using rule 58 (compoundStmt)


state 88

   61 stmts: stmts stmt .

    $default  reduce using rule 61 (stmts)


state 89

    7 postfixExp: postfixExp '(' ')' .

    $default  reduce using rule 7 (postfixExp)


state 90

    8 postfixExp: postfixExp '(' argExpList . ')'
   10 argExpList: argExpList . ',' assignExp

    ')'  shift, and go to state 127
    ','  shift, and go to state 128


state 91

    9 argExpList: assignExp .

    $default  reduce using rule 9 (argExpList)


state 92

    6 postfixExp: postfixExp '[' exp . ']'
   34 exp: exp . ',' assignExp

    ']'  shift, and go to state 129
    ','  shift, and go to state 69


state 93

   32 assignExp: unaryExp assignOp unaryExp .

    $default  reduce using rule 32 (assignExp)


state 94

   14 arithExp: arithExp '-' unaryExp .

    $default  reduce using rule 14 (arithExp)


state 95

   13 arithExp: arithExp '+' unaryExp .

    $default  reduce using rule 13 (arithExp)


state 96

   15 arithExp: arithExp '*' unaryExp .

    $default  reduce using rule 15 (arithExp)


state 97

   16 arithExp: arithExp '/' unaryExp .

    $default  reduce using rule 16 (arithExp)


state 98

   12 arithExp: unaryExp .

    $default  reduce using rule 12 (arithExp)


state 99

   13 arithExp: arithExp . '+' unaryExp
   14         | arithExp . '-' unaryExp
   15         | arithExp . '*' unaryExp
   16         | arithExp . '/' unaryExp
   19 relationExp: relationExp tLEQ arithExp .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 19 (relationExp)


state 100

   13 arithExp: arithExp . '+' unaryExp
   14         | arithExp . '-' unaryExp
   15         | arithExp . '*' unaryExp
   16         | arithExp . '/' unaryExp
   20 relationExp: relationExp tGEQ arithExp .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 20 (relationExp)


state 101

   13 arithExp: arithExp . '+' unaryExp
   14         | arithExp . '-' unaryExp
   15         | arithExp . '*' unaryExp
   16         | arithExp . '/' unaryExp
   22 relationExp: relationExp '>' arithExp .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 22 (relationExp)


state 102

   13 arithExp: arithExp . '+' unaryExp
   14         | arithExp . '-' unaryExp
   15         | arithExp . '*' unaryExp
   16         | arithExp . '/' unaryExp
   21 relationExp: relationExp '<' arithExp .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58
    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 21 (relationExp)


state 103

   19 relationExp: relationExp . tLEQ arithExp
   20            | relationExp . tGEQ arithExp
   21            | relationExp . '<' arithExp
   22            | relationExp . '>' arithExp
   24 equalExp: equalExp tEQ relationExp .

    tLEQ  shift, and go to state 61
    tGEQ  shift, and go to state 62
    '>'   shift, and go to state 63
    '<'   shift, and go to state 64

    $default  reduce using rule 24 (equalExp)


state 104

   19 relationExp: relationExp . tLEQ arithExp
   20            | relationExp . tGEQ arithExp
   21            | relationExp . '<' arithExp
   22            | relationExp . '>' arithExp
   25 equalExp: equalExp tNEQ relationExp .

    tLEQ  shift, and go to state 61
    tGEQ  shift, and go to state 62
    '>'   shift, and go to state 63
    '<'   shift, and go to state 64

    $default  reduce using rule 25 (equalExp)


state 105

   24 equalExp: equalExp . tEQ relationExp
   25         | equalExp . tNEQ relationExp
   27 andExp: andExp '&' equalExp .

    tEQ   shift, and go to state 65
    tNEQ  shift, and go to state 66

    $default  reduce using rule 27 (andExp)


state 106

   27 andExp: andExp . '&' equalExp
   29 orExp: orExp '|' andExp .

    '&'  shift, and go to state 67

    $default  reduce using rule 29 (orExp)


state 107

   34 exp: exp ',' assignExp .

    $default  reduce using rule 34 (exp)


state 108

   69 selectionStmt: KW_IF exp KW_THEN stmt .
   70              | KW_IF exp KW_THEN stmt . KW_ELSE stmt

    KW_ELSE  shift, and go to state 130

    KW_ELSE   [reduce using rule 69 (selectionStmt)]
    $default  reduce using rule 69 (selectionStmt)


state 109

   71 iterationStmt: KW_WHILE exp KW_DO stmt .

    $default  reduce using rule 71 (iterationStmt)


state 110

   72 iterationStmt: KW_FOR IDENTIFIER tASSIGN tNUMBER . KW_TO tNUMBER KW_DO stmt

    KW_TO  shift, and go to state 131


state 111

   74 letStmt: KW_LET decs KW_IN stmt . KW_END

    KW_END  shift, and go to state 132


state 112

   76 terms: terms ';' .

    $default  reduce using rule 76 (terms)


state 113

   37 decs: decs terms dec .

    $default  reduce using rule 37 (decs)


state 114

   43 typeDef: KW_TYPE_INT .

    $default  reduce using rule 43 (typeDef)


state 115

   44 typeDef: KW_TYPE_STR .

    $default  reduce using rule 44 (typeDef)


state 116

   47 type: KW_ARRAY_OF . typeDef

    KW_TYPE_INT  shift, and go to state 114
    KW_TYPE_STR  shift, and go to state 115
    KW_ARRAY_OF  shift, and go to state 116
    IDENTIFIER   shift, and go to state 117
    '{'          shift, and go to state 118

    typeDef  go to state 133
    type     go to state 120


state 117

   45 type: IDENTIFIER .

    $default  reduce using rule 45 (type)


state 118

   46 type: '{' . typeFields '}'

    IDENTIFIER  shift, and go to state 122

    $default  reduce using rule 78 (none)

    typeFields  go to state 134
    typeField   go to state 124
    none        go to state 125


state 119

   52 varDec: KW_VAR IDENTIFIER ':' typeDef .
   53       | KW_VAR IDENTIFIER ':' typeDef . assignOp unaryExp

    tASSIGN  shift, and go to state 55

    $default  reduce using rule 52 (varDec)

    assignOp  go to state 135


state 120

   42 typeDef: type .

    $default  reduce using rule 42 (typeDef)


state 121

   41 typeDec: KW_TYPE IDENTIFIER '=' typeDef .

    $default  reduce using rule 41 (typeDec)


state 122

   51 typeField: IDENTIFIER . ':' typeDef

    ':'  shift, and go to state 136


state 123

   49 typeFields: typeFields . ',' typeField
   54 funcDef: KW_FUNC IDENTIFIER '(' typeFields . ')' '=' compoundStmt
   55        | KW_FUNC IDENTIFIER '(' typeFields . ')' ':' typeDef '=' compoundStmt

    ')'  shift, and go to state 137
    ','  shift, and go to state 138


state 124

   48 typeFields: typeField .

    $default  reduce using rule 48 (typeFields)


state 125

   50 typeField: none .

    $default  reduce using rule 50 (typeField)


state 126

   59 compoundStmt: '(' decs stmts ')' .

    $default  reduce using rule 59 (compoundStmt)


state 127

    8 postfixExp: postfixExp '(' argExpList ')' .

    $default  reduce using rule 8 (postfixExp)


state 128

   10 argExpList: argExpList ',' . assignExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 38

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 139


state 129

    6 postfixExp: postfixExp '[' exp ']' .

    $default  reduce using rule 6 (postfixExp)


state 130

   70 selectionStmt: KW_IF exp KW_THEN stmt KW_ELSE . stmt

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmt            go to state 140
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 131

   72 iterationStmt: KW_FOR IDENTIFIER tASSIGN tNUMBER KW_TO . tNUMBER KW_DO stmt

    tNUMBER  shift, and go to state 141


state 132

   74 letStmt: KW_LET decs KW_IN stmt KW_END .

    $default  reduce using rule 74 (letStmt)


state 133

   47 type: KW_ARRAY_OF typeDef .

    $default  reduce using rule 47 (type)


state 134

   46 type: '{' typeFields . '}'
   49 typeFields: typeFields . ',' typeField

    ','  shift, and go to state 138
    '}'  shift, and go to state 142


state 135

   53 varDec: KW_VAR IDENTIFIER ':' typeDef assignOp . unaryExp

    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '('         shift, and go to state 38

    primaryExp  go to state 14
    postfixExp  go to state 15
    unaryExp    go to state 143


state 136

   51 typeField: IDENTIFIER ':' . typeDef

    KW_TYPE_INT  shift, and go to state 114
    KW_TYPE_STR  shift, and go to state 115
    KW_ARRAY_OF  shift, and go to state 116
    IDENTIFIER   shift, and go to state 117
    '{'          shift, and go to state 118

    typeDef  go to state 144
    type     go to state 120


state 137

   54 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' . '=' compoundStmt
   55        | KW_FUNC IDENTIFIER '(' typeFields ')' . ':' typeDef '=' compoundStmt

    '='  shift, and go to state 145
    ':'  shift, and go to state 146


state 138

   49 typeFields: typeFields ',' . typeField

    IDENTIFIER  shift, and go to state 122

    $default  reduce using rule 78 (none)

    typeField  go to state 147
    none       go to state 125


state 139

   10 argExpList: argExpList ',' assignExp .

    $default  reduce using rule 10 (argExpList)


state 140

   70 selectionStmt: KW_IF exp KW_THEN stmt KW_ELSE stmt .

    $default  reduce using rule 70 (selectionStmt)


state 141

   72 iterationStmt: KW_FOR IDENTIFIER tASSIGN tNUMBER KW_TO tNUMBER . KW_DO stmt

    KW_DO  shift, and go to state 148


state 142

   46 type: '{' typeFields '}' .

    $default  reduce using rule 46 (type)


state 143

   53 varDec: KW_VAR IDENTIFIER ':' typeDef assignOp unaryExp .

    $default  reduce using rule 53 (varDec)


state 144

   51 typeField: IDENTIFIER ':' typeDef .

    $default  reduce using rule 51 (typeField)


state 145

   54 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' '=' . compoundStmt

    '('  shift, and go to state 149

    compoundStmt  go to state 150


state 146

   55 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' ':' . typeDef '=' compoundStmt

    KW_TYPE_INT  shift, and go to state 114
    KW_TYPE_STR  shift, and go to state 115
    KW_ARRAY_OF  shift, and go to state 116
    IDENTIFIER   shift, and go to state 117
    '{'          shift, and go to state 118

    typeDef  go to state 151
    type     go to state 120


state 147

   49 typeFields: typeFields ',' typeField .

    $default  reduce using rule 49 (typeFields)


state 148

   72 iterationStmt: KW_FOR IDENTIFIER tASSIGN tNUMBER KW_TO tNUMBER KW_DO . stmt

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    compoundStmt    go to state 29
    stmt            go to state 152
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 149

   56 compoundStmt: '(' . ')'
   57             | '(' . decs ')'
   58             | '(' . stmts ')'
   59             | '(' . decs stmts ')'

    KW_IF       shift, and go to state 1
    KW_WHILE    shift, and go to state 2
    KW_FOR      shift, and go to state 3
    KW_BREAK    shift, and go to state 4
    KW_LET      shift, and go to state 5
    KW_VAR      shift, and go to state 6
    KW_TYPE     shift, and go to state 7
    KW_FUNC     shift, and go to state 8
    tNUMBER     shift, and go to state 9
    tSTRING     shift, and go to state 10
    IDENTIFIER  shift, and go to state 11
    '-'         shift, and go to state 12
    '('         shift, and go to state 13
    ')'         shift, and go to state 48

    primaryExp      go to state 14
    postfixExp      go to state 15
    unaryExp        go to state 16
    arithExp        go to state 17
    relationExp     go to state 18
    equalExp        go to state 19
    andExp          go to state 20
    orExp           go to state 21
    conditionalExp  go to state 22
    assignExp       go to state 23
    exp             go to state 24
    decs            go to state 50
    dec             go to state 43
    typeDec         go to state 26
    varDec          go to state 27
    funcDef         go to state 28
    compoundStmt    go to state 29
    stmts           go to state 51
    stmt            go to state 52
    expStmt         go to state 31
    selectionStmt   go to state 32
    iterationStmt   go to state 33
    jumpStmt        go to state 34
    letStmt         go to state 35


state 150

   54 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' '=' compoundStmt .

    $default  reduce using rule 54 (funcDef)


state 151

   55 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' ':' typeDef . '=' compoundStmt

    '='  shift, and go to state 153


state 152

   72 iterationStmt: KW_FOR IDENTIFIER tASSIGN tNUMBER KW_TO tNUMBER KW_DO stmt .

    $default  reduce using rule 72 (iterationStmt)


state 153

   55 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' ':' typeDef '=' . compoundStmt

    '('  shift, and go to state 149

    compoundStmt  go to state 154


state 154

   55 funcDef: KW_FUNC IDENTIFIER '(' typeFields ')' ':' typeDef '=' compoundStmt .

    $default  reduce using rule 55 (funcDef)
