"==================================
"Edit by Herr_Alucard/(adrian.hu@ericsson.com)
"(Just for Windows GVIM version 7.2)
"==================================
"Compatible Mode
set nocp
"Useful global configuration
"==================================
syn on
set nohlsearch
highlight Comment term=bold ctermfg=2
highlight Constant term=underline ctermfg=7
set guifont=Bitstream_Vera_Sans_Mono:h10:cANSI
"vim temp
"let vimtdir=$HOME .'/.vim/vimtmp'
"let vimtdir='~/.vim/vimtmp'
"set backup
"let &backupdir=vimtdir
"let &directory=vimtdir

let &viminfo="'20,".'%,n'.'~/_viminfo'

"set backup
"set viminfo =1000,f1,<500 
set history=1000

set number 
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set backspace=2
set autoindent
set showmatch
set ai!
set ruler
colo freya
set tags=tags;
set autochdir
set showcmd
set smartcase
set smartindent
set incsearch

filetype on
"==================================
"Files & Backups
"==================================
"Turn backup OFF
set nobackup
set nowb
set noswapfile
"Just put the fucking xxxx~ file to hell ¨r(¨s¨Œ¨t)¨q
set backupdir=~/vimtmp
"Because our cases run on unix erv,I suggest 
"we keep the file format on unix <(£þ¦á£þ)>
set fileformat=unix

"Statusline	
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
"set statusline=%<%F%h%m%r=\[%B\]\ %l,%c%V\ %P 
set laststatus=2

"==================================
"Shortcut 
"==================================
"Set mapleade
"let mapleader=","
"Fast reloading of the .vimrc
"nmap <leader>sv:source! ~/_vimrc<CR>
"Fast editing of .vimrc
"nmap <leader>ev:e ~/_vimrc<CR>
"When .vimrc is edited ,reload it
autocmd! bufwritepost .vimrc source ~/_vimrc

"==================================
"Key&Shortcut Mapping
"==================================
map <F2> : w<CR>
imap <F2> <ESC>:w<CR>li

map <F3> : TlistToggle<CR>5<C-w>h
imap <F3> <ESC>:TlistToggle<CR>l5<C-w>hi

"Deprecated
"nmap <F4>: set invnumber<CR>

"map <F5> : set e!<CR>
"imap <F5> <ESC>:e!<CR>li

" Refresh
map <F6> :e!<CR>5<C-w>h
imap <F6> <ESC>:e!<CR>l5<C-w>hi  

"New Tab
map <F10> :tabnew<CR>5<C-w>h
imap <F10> <ESC>:tabnew<CR>l5<C-w>hi  

"previous Tab
map <F11> :tabp<CR>5<C-w>h
imap <F11> <ESC>:tabp<CR>l5<C-w>hi  

"next Tab
map <F12> :tabn<CR>5<C-w>h
imap <F12> <ESC>:tabn<CR>l5<C-w>hi  

map <MouseDown> :<C-Y>
map <MouseUp> :<C-E>

"nmap edv :e ~/_vimrc<CR>
"nmap scv :source ~/_vimrc<CR>

"Upcase the first char of word in current line
nmap gUu :.s/\([_\s]*\)\([0-9a-zA-Z]*\)/\=submatch(1).substitute(tolower(submatch(2)),'.*','\u&','g')/g<CR>

nmap fu :set fileformat=unix<CR><F2> 
nmap fd :set fileformat=dos<CR><F2>
nmap cp :!cp -f % c:\cygwin\home\ehuufei\ttcn\quick_test<CR><ESC>
" In unix erv
" nmap cp :!cp % /scratch/j20/ft/ehuufei/testsuite/quick_test/<CR><ESC>
"nmap <C-[> :ts<CR>

"------------------------------------------------------------------------
" Alucard's fast edit
"------------------------------------------------------------------------
nmap zy viwy
nmap zp viwp

"==================================
"Custom Function
"==================================
"Platform
function!MySys()
	if has("win32")
		return "windows"
	else
		return "linux"
	endif
endfunction

"SwitchToBuf--Open/Edit a new file in a new Tab
function! SwitchToBuf(filename)
"let fullfn=substitute(a:filename,"^\\~/",$HOME."/","")
"find in current tab
let bufwinnr=bufwinnr(a:filename)
if bufwinnr !=-1
	exec bufwinnr ."wincmd w"
	return
else
	"finde in each tab
	tabfirst
	let tab=1
	while tab <= tabpagenr("$")
		let bufwinnr =bufwinnr(a:filename)
		if bufwinnr !=-1
			exec "normal".tab."gt"
			exec bufwinnr."wincmd w"
			return
		endif
		tabnext
		let tab = tab+1
	endwhile
	"not exist,new tab
	exec "tabnew". a:filename
endfunction

function AddTitle()
    call setline()

endfunction

"Lookup File
function SetRootOfTheProject(path)
    "Enter the specified dir
    exe 'cd'.a:path
    "Generate the tags(Because the find and sort cmd under Windows,I give up
    "generating tags under Windows,I use Cygwin)
    "exe '!genfiletags'
    "
    "Get the path of tags file
    let tagFilepath=genutils#CleanupFileName(a:path.'/filenametags')
    exe "let g:LookupFile_TagExpr='\"".tagFilepath."\"'"
endfunction

function SetHereTheRoot()
    call SetRootOfTheProject('.')
endfunction

nmap <leader>root :call SetHereTheRoot()<CR>

function SetSpecifiedPathTheRoot()
    call SetRootOfTheProject(input('Enter your workspace path:'))
endfunction
nmap <leader>xroot :call SetSpecifiedPathTheRoot()<CR>

function AddComments()

endfunction

function LoadLookup(view)
    if a:view == 'gx'
        if filereadable("M:\\ehuufei_mpg_llv_ttcn_porting_sh_int_gx\\ggsn_test\\filenametags")
            let g:LookupFile_TagExpr = '"M:\\ehuufei_mpg_llv_ttcn_porting_sh_int_gx\\ggsn_test\\filenametags"'
        endif
    elseif a:view == 'int'
        if filereadable("M:\\ehuufei_mpg_llv_ttcn_porting_int\\ggsn_test\\filenametags")
            let g:LookupFile_TagExpr = '"M:\\ehuufei_mpg_llv_ttcn_porting_int\\ggsn_test\\filenametags"'
        endif
    elseif a:view == 'lsv'
        if filereadable("M:\\ehuufei_ggsn_lsv_int\\ggsn_test\\filenametags")
            let g:LookupFile_TagExpr = '"M:\\ehuufei_ggsn_lsv_int\\ggsn_test\\filenametags"'
        endif
    elseif a:view == 'ruby'
        if filereadable("C:\\cygwin\\home\\ehuufei\\script\\ruby\\filenametags")
            let g:LookupFile_TagExpr = '"C:\\cygwin\\home\\ehuufei\\script\\ruby\\filenametags"'
        endif
    elseif a:view == 'java'
        if filereadable("C:\\cygwin\\home\\ehuufei\\java\\filenametags")
            let g:LookupFile_TagExpr = '"C:\\cygwin\\home\\ehuufei\\java\\filenametags"'
        endif
    elseif a:view == 'c'
        if filereadable("C:\\cygwin\\home\\ehuufei\\linuxDIY\\linux-0.11\\filenametags")
            let g:LookupFile_TagExpr = '"C:\\cygwin\\home\\ehuufei\\linuxDIY\\linux-0.11\\filenametags"'
        endif
    endif
endfunction

function SetLookup()
    call LoadLookup(input('Enter your workspace view[gx|lsv|ruby|java|c]:'))
endfunction
"==================================
"Tag List(ctags)
"==================================
if MySys()=="windows"
	let Tlist_Ctags_Cmd='ctags'
elseif MySys()=="linux"
	let Tlist_Ctags_Cmd='/usr/bin/ctags'
endif
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindows = 1
let Tlist_Use_Right_Window = 1
let Tlist_Sort_Type ="order"
let Tlist_Display_Prototype=0
let Tlist_Compart_Format=1
let Tlist_GainFocus_On_ToggleOpen=0
let Tlist_Close_On_select=0
let Tlist_Enable_Fold_Column=0
let Tlist_WinWidth=40
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction
"==================================
"Configuration for Plugins
"==================================
"Lookup Files
let g:LookupFile_MinPatLength = 4
let g:LookupFile_PreserveLastPattern = 0
let g:LookupFile_PreservePatternHistory = 1
let g:LookupFile_AlwaysAcceptFirst = 1
let g:LookupFile_AllowNewFiles = 0
"Here the lookup tags is hardcode.Maybe it will be better using dynamic
"loading.
"if filereadable("M:\\ehuufei_ggsn_llv_ttcn_lift_porting_gx\\ggsn_test\\filenametags")
"    let g:LookupFile_TagExpr = '"M:\\ehuufei_ggsn_llv_ttcn_lift_porting_gx\\ggsn_test\\filenametags"'
"endif

"Load Lookup File
call LoadLookup('c')

"nmap <silent> <leader>lk <Plug>LookupFile<cr>
"nmap <silent> <leader>ll <Plug>LUBufs<cr>
"nmap <silent> <leader>lw <Plug>LUWalk<cr>
"

" cscope
"==================================
"Configuration for Syntastic
"==================================
execute pathogen#infect()
syntax on
filetype plugin indent on

"==================================
"Configuration for TTCN3
"==================================
"Foldmethod
autocmd FileType ttcn setl fdm=syntax
au BufNewFile,BufRead *.ttcn			setf ttcn
"==================================
"Configuration for RUBY
"==================================
"==================================
"Configuration for Golang
"==================================
let g:syntastic_cpp_compiler_options = ' -std=c++11'

