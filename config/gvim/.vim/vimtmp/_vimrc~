"==================================
"Edit by Herr_Alucard
"==================================
"Compatible Mode
set nocp
"The useful global configuration
"==================================
syn on
set nohlsearch
highlight Comment term=bold ctermfg=2
highlight Constant term=underline ctermfg=7
set guifont=Bitstream_Vera_Sans_Mono:h10:cANSI
"vim temp
let vimtdir=$HOME .'/.vim/vimtmp'
set backup
let &backupdir=vimtdir
let &directory=vimtdir

let &viminfo="'20,".'%,n'.'~/_viminfo'

set backup
set viminfo ='1000,f1,<500 
set history = 1000

set number 
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set backspace=2
set autoindent
set showmatch
set ai!
set ruler
colo darkblue
set tags=tags;
set autochdir
set showcmd
set smartcase
set smartindent
set incsearch

filetype on

"Statusline	
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
"set statusline=%<%F%h%m%r=\[%B\]\ %l,%c%V\ %P 
set laststatus=2
"==================================
"The shortcut 
"==================================
"Set mapleade
let mapleader=","
"Fast reloading of the .vimrc
map <silent><leader>ss:source ~/.vimrc<cr>
"Fast editing of .vimrc
map <silent><leader>ee:e ~/.vimrc<cr>
"When .vimrc is edited ,reload it
autocmd! bufwritepost .vimrc source ~/.vimrc

"==================================
"The Mapping
"==================================
map <F2> : w<CR>
imap <F2> <ESC>:w<CR>li

map <F3> : TlistToggle<CR>5<C-w>h
imap <F3> <ESC>:TlistToggle<CR>l5<C-w>hi

nmap <F4>:set invnumber<CR>

map <F5> : set e!<CR>
imap <F5> <ESC>:e!<CR>li

map <F11> :tabp<CR>5<C-w>h
imap <F11> <ESC>:tabp<CR>l5<C-w>hi  

map <F12> :tabn<CR>5<C-w>h
imap <F12> <ESC>:tabn<CR>l5<C-w>hi  

map <MouseDown> :<C-Y>
map <MouseUp> :<C-E>

"==================================
"The custom function
"==================================
"Platform
function!MySys()
	if has("win32")
		return "windows"
	else
		return "linux"
	endif
endfunction

"SwitchToBuf--Open/Edit a new file in a new Tab
function! SwitchToBuf(filename)
"let fullfn=substitute(a:filename,"^\\~/",$HOME."/","")
"find in current tab
let bufwinnr=bufwinnr(a:filename)
if bufwinnr !=-1
	exec bufwinnr ."wincmd w"
	return
else
	"finde in each tab
	tabfirst
	let tab=1
	while tab <= tabpagenr("$")
		let bufwinnr =bufwinnr(a:filename)
		if bufwinnr !=-1
			exec "normal".tab."gt"
			exec bufwinnr."wincmd w"
			return
		endif
		tabnext
		let tab = tab+1
	endwhile
	"not exist,new tab
	exec "tabnew". a:filename
endfunction

function AddTitle()
    call setline()

endfunction

function AddComments()

endfunction
"==================================
"Tag List(ctags)
"==================================
if MySys()=="windows"
	let Tlist_Ctags_Cmd='ctags'
elseif MySys()=="linux"
	let Tlist_Ctags_Cmd='/usr/bin/ctags'
endif
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindows = 1
let Tlist_Use_Right_Window = 1
let Tlist_Sort_Type ="order"
let Tlist_Display_Prototype=0
let Tlist_Compart_Format=1
let Tlist_GainFocus_On_ToggleOpen=0
let Tlist_Close_On_select=0
let Tlist_Enable_Fold_Column=0
let Tlist_WinWidth=40
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

